<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="Alt-Ergo" version="2.4.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="ocaml" proved="true">
<path name=".."/><path name="ocaml_fold.ml"/>
<theory name="Ocaml_fold" proved="true">
 <goal name="seq_of_list_append" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="seq_of_list_append.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l1">
   <goal name="seq_of_list_append.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="seq_of_list_append.0.0.0" proved="true">
    <proof prover="1"><result status="valid" time="0.032893" steps="201"/></proof>
    </goal>
    <goal name="seq_of_list_append.0.0.1" proved="true">
    <proof prover="1"><result status="valid" time="0.059597" steps="533"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="fold_left&#39;vc" expl="VC for fold_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="fold_left&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.039549" steps="122"/></proof>
  </goal>
  <goal name="fold_left&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="1.106608" steps="166078"/></proof>
  <transf name="remove" proved="true" arg1="H1">
   <goal name="fold_left&#39;vc.1.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="1.027262" steps="185527"/></proof>
   <transf name="remove" proved="true" arg1="H1">
    <goal name="fold_left&#39;vc.1.0.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="1.184919" steps="203862"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fold_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.043891" steps="280"/></proof>
  </goal>
  <goal name="fold_left&#39;vc.3" expl="precondition" proved="true">
  <transf name="instantiate" proved="true" arg1="H3" arg2="(seq_of_list v),acc,x1">
   <goal name="fold_left&#39;vc.3.0" expl="precondition" proved="true">
   <transf name="destruct_rec" proved="true" arg1="Hinst">
    <goal name="fold_left&#39;vc.3.0.0" expl="destruct premise" proved="true">
    <proof prover="1"><result status="valid" time="0.020313" steps="24"/></proof>
    </goal>
    <goal name="fold_left&#39;vc.3.0.1" expl="destruct premise" proved="true">
    <proof prover="1"><result status="valid" time="0.065691" steps="629"/></proof>
    </goal>
    <goal name="fold_left&#39;vc.3.0.2" expl="destruct premise" proved="true">
    <proof prover="1"><result status="valid" time="0.032123" steps="148"/></proof>
    </goal>
    <goal name="fold_left&#39;vc.3.0.3" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(v ++&#39; Cons x1 (Nil: list a) ==&#39; snoc (seq_of_list v) x1)">
     <goal name="fold_left&#39;vc.3.0.3.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="0.082121" steps="791"/></proof>
     </goal>
     <goal name="fold_left&#39;vc.3.0.3.1" expl="precondition" proved="true">
     <proof prover="1"><result status="valid" time="0.029855" steps="47"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fold_left&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.020000" steps="40"/></proof>
  </goal>
  <goal name="fold_left&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="fold_left&#39;vc.5.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fold_left&#39;vc.5.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.010000" steps="24"/></proof>
    </goal>
    <goal name="fold_left&#39;vc.5.0.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.010000" steps="26"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="fold_left&#39;vc.5.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fold_left&#39;vc.5.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.020000" steps="109"/></proof>
    </goal>
    <goal name="fold_left&#39;vc.5.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.030000" steps="291"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="fold_left&#39;vc.5.2" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="fold_left&#39;vc.5.2.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.010000" steps="27"/></proof>
    </goal>
    <goal name="fold_left&#39;vc.5.2.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.000000" steps="28"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="summ&#39;vc" expl="VC for summ" proved="true">
 <proof prover="1"><result status="valid" time="0.023507" steps="24"/></proof>
 </goal>
 <goal name="sum_cons" proved="true">
 <proof prover="1"><result status="valid" time="1.600595" steps="8577"/></proof>
 </goal>
 <goal name="seq_list_sum" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="seq_list_sum.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="seq_list_sum.0.0" proved="true">
   <proof prover="1"><result status="valid" time="0.025417" steps="89"/></proof>
   </goal>
   <goal name="seq_list_sum.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.029901" steps="119"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="test_sum&#39;vc" expl="VC for test_sum" proved="true">
 <proof prover="1"><result status="valid" time="0.052699" steps="458"/></proof>
 </goal>
 <goal name="seq_list_length" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="seq_list_length.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="seq_list_length.0.0" proved="true">
   <proof prover="1"><result status="valid" time="0.034326" steps="73"/></proof>
   </goal>
   <goal name="seq_list_length.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.027919" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="test_length&#39;vc" expl="VC for test_length" proved="true">
 <proof prover="1"><result status="valid" time="0.046672" steps="380"/></proof>
 </goal>
 <goal name="foldr&#39;vc" expl="VC for foldr" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="foldr&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="1"><result status="valid" time="0.042180" steps="99"/></proof>
  </goal>
  <goal name="foldr&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.048062" steps="18"/></proof>
  </goal>
  <goal name="foldr&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.033597" steps="28"/></proof>
  </goal>
  <goal name="foldr&#39;vc.3" expl="postcondition" proved="true">
  <transf name="destruct_term" proved="true" arg1="xs">
   <goal name="foldr&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.026283" steps="88"/></proof>
   </goal>
   <goal name="foldr&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.019866" steps="20"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="test_length_foldr&#39;vc" expl="VC for test_length_foldr" proved="true">
 <proof prover="1"><result status="valid" time="0.043536" steps="233"/></proof>
 </goal>
 <goal name="test_sum_foldr&#39;vc" expl="VC for test_sum_foldr" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="test_sum_foldr&#39;vc.0" expl="VC for test_sum_foldr" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="test_sum_foldr&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.034418" steps="62"/></proof>
   </goal>
   <goal name="test_sum_foldr&#39;vc.0.1" expl="precondition" proved="true">
   <transf name="compute_specified" proved="true" >
    <goal name="test_sum_foldr&#39;vc.0.1.0" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(x + acc = sum (cons x ys))">
     <goal name="test_sum_foldr&#39;vc.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="1"><result status="valid" time="1.986303" steps="9172"/></proof>
     </goal>
     <goal name="test_sum_foldr&#39;vc.0.1.0.1" expl="precondition" proved="true">
     <proof prover="1"><result status="valid" time="0.023779" steps="33"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="test_sum_foldr&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.026329" steps="36"/></proof>
   </goal>
   <goal name="test_sum_foldr&#39;vc.0.3" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.033230" steps="89"/></proof>
   </goal>
   <goal name="test_sum_foldr&#39;vc.0.4" expl="precondition" proved="true">
   <proof prover="1"><result status="valid" time="0.069973" steps="666"/></proof>
   </goal>
   <goal name="test_sum_foldr&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.027217" steps="38"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
